---

# Packages

- name: software-properties-common
  apt:
    update_cache: yes
    cache_valid_time: 3600
    name:
      - software-properties-common
    state: present

- name: Add certbot ppa
  apt_repository:
    repo: ppa:certbot/certbot
    update_cache: yes
    state: present

- name: Nginx software
  apt:
    update_cache: yes
    cache_valid_time: 3600
    name:
      - nginx
      - python-certbot-nginx
      - userv
    state: present

- name: Disable the nginx package default site definition
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: "restart nginx"

- name: Set services to start on reboot
  service:
    name: "{{ item }}"
    enabled: yes
  loop:
    - nginx
    - userv

# Acme challenge automation

- name: Create acme-challenge user
  user:
    name: acme-challenge
    state: present

- name: acme-challenge directories
  file:
    dest: "{{ item.dest }}"
    state: directory
    owner: root
    group: root
    mode: "{{ item.mode | default('u=rwx,go=rx') }}"
  loop:
    - { dest: ~acme-challenge/.ssh }
    - { dest: ~root/acme-challenge-keys, mode: "u=rwx,go=" }
    - { dest: /usr/local/lib/userv/ }
    - { dest: /var/www/acme-challenge }
    - { dest: /etc/nginx/acme-challenge/bin }
  loop_control:
    label: "{{ item.dest }}"

- name: acme-challenge files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode | default('u=rw,go=r') }}"
  loop:
    - { src: acme-challenge_authorized_keys, dest: ~acme-challenge/.ssh/authorized_keys }
    - { src: acme-challenge-key.pub, dest: ~root/acme-challenge-keys/acme-challenge-key.pub }
    - { src: scripts/acme-challenge.target, dest: /usr/local/lib/userv/, mode: "u=rwx,go=rx" }
    - { src: scripts/acme-challenge, dest: /etc/userv/services.d/ }
    - { src: scripts/deploy.sh, dest: /etc/letsencrypt/renewal-hooks/deploy/, mode: "u=rwx,go=rx" }
    - { src: www-acme-challenge/, dest: /var/www/acme-challenge/ }
    - { src: scripts/request-certificate.sh, dest: /etc/nginx/acme-challenge/bin, mode: "u=rwx,go=rx"}
    - { src: scripts/request-smartcambridge-certificate.sh, dest: /etc/nginx/acme-challenge/bin, mode: "u=rwx,go=rx"}
    - { src: scripts/request-test-certificate.sh, dest: /etc/nginx/acme-challenge/bin, mode: "u=rwx,go=rx"}
    - { src: scripts/authenticator.sh, dest: /etc/nginx/acme-challenge/bin, mode: "u=rwx,go=rx" }
    - { src: scripts/cleanup.sh, dest: /etc/nginx/acme-challenge/bin, mode: "u=rwx,go=rx" }
  loop_control:
    label: "{{ item.dest }}"

- name: acme-challenge SSH private key
  gpg_d:
    src: acme-challenge-key.asc
    dest: ~root/acme-challenge-keys/acme-challenge-key
    owner: root
    group: root
    mode: "u=rw,go="

# Nginx configuration

- name: nginx includes2 directory
  synchronize:
    src: includes2/
    dest: /etc/nginx/includes2/
    archive: no
    checksum: yes
    recursive: yes
  notify: "restart nginx"

- name: nginx site definition files
  synchronize:
    src: sites-available/
    dest: /etc/nginx/sites-available/
    archive: no
    checksum: yes
    recursive: yes
  notify: "restart nginx"

# Startup the tc_prod http config to support getting certificates

- name: tfc_prod over http
  file:
    src: ../sites-available/tfc_prod.conf
    path: /etc/nginx/sites-enabled/tfc_prod.conf
    state: link
  notify: "restart nginx"

- name: Restart nginx if necessary
  meta:
    flush_handlers

# Static keys/certificates

- name: nginx certificate directory
  file:
    dest: /etc/nginx/ssl
    state: directory
    owner: root
    group: root
    mode: "u=rwx,go=rx"

- name: SSL files
  copy:
    src: "{{ item }}"
    dest: /etc/nginx/ssl/
    owner: root
    group: root
    mode: "u=rw,go=r"
  loop:
    - dummy.key
    - dummy.crt

# Certbot

- name: dhparams (may take some time!)
  command: openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
  args:
    creates: /etc/ssl/certs/dhparam.pem
  notify: "restart nginx"

- name: letsencrypt nginx options
  copy:
    src: options-ssl-nginx.conf
    dest: /etc/letsencrypt/
    owner: root
    group: root
    mode: "u=rw,go=r"
  notify: "restart nginx"

# WARNING: this config makes some assumptions about the state of the
# machine it is configuring:
#
# 1) If /etc/letsencrypt/accounts/ exists then it contains a Letsencrypt
# account that can be used to request certificates
#
# 2) If /etc/letsencrypt/live/tfc_prod/ exists it contains a (possibly-expired)
# certbot-issued Letsencrypt certificate for the host being configured
#
# 3) If /etc/letsencrypt/live/smartcambridge.org/ exists it contains a
# (possibly-expired) certbot-issued Letsencrypt certificate for
# {www.,}smartcambridge.org
#
# It should be safe to delete any or all of these and re-run Ansible if
# these assumptions prove to be incorrect.

- name: Register with letsencrypt
  command: /usr/bin/certbot --quiet register -m admin@smartcambridge.org --agree-tos --no-eff-email
  args:
    creates: /etc/letsencrypt/accounts

- name: host certificate (may take some time)
  command: /etc/nginx/acme-challenge/bin/request-certificate.sh
  args:
    creates: /etc/letsencrypt/live/tfc_prod

- name: smartcambridge.org certificate (may take some time)
  command: /etc/nginx/acme-challenge/bin/request-smartcambridge-certificate.sh
  args:
    creates: /etc/letsencrypt/live/smartcambridge.org

- name: Check for expired certificates
  command: /usr/bin/certbot --quiet renew
  changed_when: false

# Production nginx config

- name: Link site files
  file:
    src: ../sites-available/{{ item }}
    path: /etc/nginx/sites-enabled/{{ item }}
    state: link
  loop:
    - tfc_prod_ssl.conf
    - smartcambridge.conf
    - 000-default.conf
  notify: "restart nginx"

# Static web site

- name: Install static website files
  synchronize:
    src: www-tfc_prod/
    dest: /var/www/tfc_prod/
    archive: no
    checksum: yes
    recursive: yes

- name: rtroute's config file
  template:
    src: rtroute_config.js.j2
    dest: /var/www/tfc_prod/backdoor/rtroute/rtroute_config.js
