---

# Packages

- name: Add certbot ppa
  apt_repository:
    repo: ppa:certbot/certbot
    update_cache: yes
    state: present

- name: Nginx software
  apt:
    update_cache: yes
    cache_valid_time: 3600
    name:
      - software-properties-common
      - nginx
      - python-certbot-nginx
      - userv
    state: present

- name: Disable the nginx package default site definition
  file:
    path: /etc/nginx/sites-enabled/devault
    state: absent

- name: Set services to start on reboot
  service:
    name: "{{ item }}"
    enabled: yes
  loop:
    - nginx
    - userv

# Acme challenge automation

- name: Create acme-challenge user
  user:
    name: acme-challenge
    state: present

- name: acme-challenge directories
  file:
    dest: {{ item.dest }}
    state: directory
    owner: root
    group: root
    mode: {{ item.mode | default("u=rwx,go=")}}
  loop:
    - { dest: ~acme-challenge/.ssh }
    - { dest: ~root/acme-challenge-keys, mode: "u=rwx,go=rx" }
    - { dest: /usr/local/lib/userv/, mode: "u=rwx,go=rx" }
    - { dest: /var/www/acme-challenge, mode: "u=rwx,go=rx" }
    - { dest: /etc/nginx/acme-challenge/bin, mode: "u=rwx,go=rx"}

- name: acme-challenge files
  copy:
    src: {{ item.src }}
    dest: {{ item.dest }}
    owner: root
    group: root
    mode: {{ item.mode | default("u=rw,go=") }}
  loop:
    - { src: acme-challenge_authorized_keys, dest: ~acme-challenge/.ssh/ }
    - { src: acme-challenge-key.pub, dest: ~root/acme-challenge-keys/acme-challenge-key.pub, mode: "u=rw,go=r" }
    - { src: scripts/acme-challenge.target, dest: /usr/local/lib/userv/, mode: "u=rw,go=r" }
    - { src: scripts/acme-challenge, dest: /etc/userv/services.d/, mode: "u=rw,go=r" }
    - { src: scripts/deploy.sh, dest: /etc/letsencrypt/renewal-hooks/deploy/, mode: "u=rwx,go=rx" }
    - { src: www-acme-challenge/, dest: /var/www/acme-challenge/, mode: "u=rw,go=r" }
    - { src: scripts/request-certificate.sh, dest: /etc/nginx/acme-challenge/bin, mode: "u=rwx,go=rx"}
    - { src: scripts/request-smartcambridge-certificate.sh, dest: /etc/nginx/acme-challenge/bin, mode: "u=rwx,go=rx"}
    - { src: scripts/request-test-certificate.sh, dest: /etc/nginx/acme-challenge/bin, mode: "u=rwx,go=rx"}
    - { src: scripts/authenticator.sh, dest: /etc/nginx/acme-challenge/bin, mode: "u=rwx,go=rx" }
    - { src: scripts/cleanup.sh, dest: /etc/nginx/acme-challenge/bin, mode: "u=rwx,go=rx" }

- name: acme-challenge SSH private key
  gpg_d:
    src: acme-challenge-key.asc
    dest: ~root/acme-challenge-keys/acme-challenge-key.asc
    owner: root
    group: root
    mode: "u=rw,go="

# Nginx configuration

- name: nginx includes2 directory
  copy:
    src: includes2/
    dest: /etc/nginx/includes2/
    owner: root
    group: root
    mode: "u=rw,go=r"

- name: nginx site definition files
  copy:
    src: sites-available/
    dest: /etc/nginx/sites-available/
    owner: root
    group: root
    mode: "u=rw,go=r"
  notify: "restart nginx"

- name: dhparams
  command: openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
  args:
    creates: /etc/nginx/ssl/dhparam.pem 2048

# Certbot

- name: letsencrypt nginx options
  copy:
    src: options-ssl-nginx.conf
    dest: /etc/letsencrypt/
    owner: root
    group: root
    mode: "u=rw,go=r"

- name: Register with letsencrypt
  command: /usr/bin/certbot register -m admin@smartcambridge.org --agree-tos --no-eff-email
  args:
    creates: /etc/letsencrypt/account

- name: Production config running?
  stat:
    path: /etc/nginx/sites-enabled/tfc_prod2.conf
  register: st

- name: Install tls bootstrap if needed
  file:
    src: ../sites-available/tls-bootstrap.conf
    path: /etc/nginx/sites-enabled/tfs-boootstrap.conf
    state: link
  notify: "restart nginx"
  when: not st.stat.islink

- name: Restart nginx if necessary
  meta:
    flush_handlers

- name: host certificate
  command: /usr/local/bin/request-certificate.sh
  args:
    creates: /etc/letsencrypt/live/tfc_prod

- name: smartcambridge.orrg certificate
  command: /usr/local/bin/request-smartcambridge-certificate.sh
  args:
    creates: /etc/letsencrypt/live/smartcambridge.org

- name: Remove tls bootstrap
  file:
    path: /etc/nginx/sites-enabled/tfs-boootstrap.conf
    state: absebt
  notify: "restart nginx"

# Other keys/certificates

- name: nginx certificate directory
  file:
    dest: /etc/nginx/ssl
    state: directory
    owner: root
    group: root
    mode: "u=rwx,go=rx"

- name: SSL files
  copy:
    src: {{ item }}
    dest: /etc/nginx/ssl/
    owner: root
    group: root
    mode: "u=rw,go=r"
  loop:
    - dummy.key
    - dummy.crt
    - carrier.pem

- name: carrier.csx key
  gpg_d:
    src: carrier.key.asc
    dest: /etc/nginx/ssl/carrier.key
    owner: root
    group: root
    mode: "u=rw,go="

# Production nginx config

- name: Link site files
  file:
    src: ../sites-available/{{ item }}
    path: /etc/nginx/sites-enabled/{{ item }}
    state: link
  loop:
    - tfc_prod2.conf
    - smartcambridge.conf
    - carrier.csi.cam.ac.uk.conf
    - 000-default.conf
  notify: "restart nginx"

# Static web site

- name: Install static website files
  copy:
    src: www
    dest: /var/www/tfc_prod
    owner: root
    group: root
    mode: "u=rw, go=r"

